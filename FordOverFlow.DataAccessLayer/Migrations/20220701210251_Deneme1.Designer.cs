// <auto-generated />
using System;
using FordOverFlow.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FordOverFlow.DataAccessLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220701210251_Deneme1")]
    partial class Deneme1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FordOverFlow.CommonEntities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplyTo")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("commentOwnerID")
                        .HasColumnType("int");

                    b.Property<int>("ownerPostID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("commentOwnerID");

                    b.HasIndex("ownerPostID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.CommentVotes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("VoteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CommentID");

                    b.HasIndex("UserID");

                    b.HasIndex("VoteID");

                    b.ToTable("CommentVotes");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Deparment");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PostID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.PostTags", b =>
                {
                    b.Property<int>("PostTagsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostTagsID"), 1L, 1);

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("PostTagsID");

                    b.HasIndex("PostID");

                    b.HasIndex("TagID");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.PostVotes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("VoteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.HasIndex("VoteID");

                    b.ToTable("PostVotes");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Tags", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.UserTags", b =>
                {
                    b.Property<int>("UserTagsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTagsID"), 1L, 1);

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserTagsID");

                    b.HasIndex("TagID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Votes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("VoteType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Comment", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("commentOwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("ownerPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.CommentVotes", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.Comment", "Comment")
                        .WithMany("CommentVotes")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.User", "User")
                        .WithMany("CommentVotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.Votes", "Vote")
                        .WithMany("CommentVotes")
                        .HasForeignKey("VoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Post", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.Category", "Category")
                        .WithMany("Post")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.PostTags", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.Tags", "Tags")
                        .WithMany("PostTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.PostVotes", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.Post", "Post")
                        .WithMany("PostVotes")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.User", "User")
                        .WithMany("PostVotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.Votes", "Vote")
                        .WithMany("PostVotes")
                        .HasForeignKey("VoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.User", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.UserTags", b =>
                {
                    b.HasOne("FordOverFlow.CommonEntities.Tags", "Tags")
                        .WithMany("UserTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FordOverFlow.CommonEntities.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Category", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Comment", b =>
                {
                    b.Navigation("CommentVotes");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");

                    b.Navigation("PostVotes");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Tags", b =>
                {
                    b.Navigation("PostTags");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.User", b =>
                {
                    b.Navigation("CommentVotes");

                    b.Navigation("Comments");

                    b.Navigation("PostVotes");

                    b.Navigation("Posts");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("FordOverFlow.CommonEntities.Votes", b =>
                {
                    b.Navigation("CommentVotes");

                    b.Navigation("PostVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
